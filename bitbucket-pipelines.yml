# ==============================================================================
# REUSABLE BITBUCKET PIPELINE CONFIGURATION
# ==============================================================================
# This pipeline is designed to be reusable across multiple projects
# Simply copy this file and customize the scripts in the /scripts folder
# ==============================================================================

# Default Docker image - Override this for your project needs
image: maven:3.8.6-openjdk-17

# ==============================================================================
# SCRIPTS-BASED CONFIGURATION
# ==============================================================================
# This pipeline uses scripts in the /scripts folder for maximum flexibility:
#
# - scripts/build.sh: Build your application
# - scripts/test.sh: Run tests
# - scripts/package.sh: Package application for deployment
# - scripts/deploy-staging.sh: Deploy to staging environment
# - scripts/deploy-production.sh: Deploy to production environment
#
# Each script contains examples for multiple programming languages and frameworks.
# Simply edit the scripts to match your project's needs!
# ==============================================================================

definitions:
  caches:
    maven-local: ~/.m2/repository
    gradle: ~/.gradle
    npm: $HOME/.npm
    node: node_modules

  steps:
    # ==========================================================================
    # BUILD AND TEST STEP - Works with any build tool
    # ==========================================================================
    - step: &build-and-test
        name: Build and Test
        caches:
          - maven
          - maven-local
          - gradle
          - npm
          - node
        script:
          - echo "=== Starting Build and Test ==="
          - echo "Project: $BITBUCKET_REPO_SLUG"
          - echo "Branch: $BITBUCKET_BRANCH"
          - echo "Commit: $BITBUCKET_COMMIT"

          # Build step - Calls scripts/build.sh
          - echo "Building application..."
          - chmod +x scripts/build.sh
          - ./scripts/build.sh

          # Test step - Calls scripts/test.sh
          - echo "Running tests..."
          - chmod +x scripts/test.sh
          - ./scripts/test.sh

          # Package step - Calls scripts/package.sh
          - echo "Packaging application..."
          - chmod +x scripts/package.sh
          - ./scripts/package.sh

          - echo "=== Build and Test Complete ==="
        artifacts:
          - target/**
          - build/**
          - dist/**
          - "*.jar"
          - "*.war"

    # ==========================================================================
    # CODE QUALITY ANALYSIS - Reusable for any project
    # ==========================================================================
    - step: &code-quality
        name: Code Quality Analysis
        caches:
          - maven
          - maven-local
          - gradle
          - npm
          - node
        script:
          - echo "=== Starting Code Quality Analysis ==="

          # Optional: Create scripts/quality.sh for custom quality checks
          - |
            if [ -f "scripts/quality.sh" ]; then
              echo "Running custom quality checks..."
              chmod +x scripts/quality.sh
              ./scripts/quality.sh
            else
              echo "No custom quality script found."
              echo "Create scripts/quality.sh to add code quality checks."
              echo "Examples: SonarQube, ESLint, Checkstyle, etc."
            fi

          - echo "=== Code Quality Analysis Complete ==="

    # ==========================================================================
    # DEPLOY TO STAGING - Parameterized deployment
    # ==========================================================================
    - step: &deploy-staging
        name: Deploy to Staging
        deployment: staging
        script:
          - echo "=== Starting Staging Deployment ==="
          - echo "Environment: STAGING"

          # Call staging deployment script
          - chmod +x scripts/deploy-staging.sh
          - ./scripts/deploy-staging.sh

          - echo "=== Staging Deployment Complete ==="

    # ==========================================================================
    # DEPLOY TO PRODUCTION - Manual trigger with parameterization
    # ==========================================================================
    - step: &deploy-production
        name: Deploy to Production
        deployment: production
        trigger: manual
        script:
          - echo "=== Starting Production Deployment ==="
          - echo "Environment: PRODUCTION"
          - echo "WARNING: This is a production deployment!"

          # Call production deployment script
          - chmod +x scripts/deploy-production.sh
          - ./scripts/deploy-production.sh

          - echo "=== Production Deployment Complete ==="

    # ==========================================================================
    # SECURITY SCAN - Optional security scanning step
    # ==========================================================================
    - step: &security-scan
        name: Security Scan
        script:
          - echo "=== Starting Security Scan ==="

          # Add your security scanning tools here
          # Examples:
          # - OWASP Dependency Check for Maven
          # - if [ -f pom.xml ]; then mvn dependency-check:check; fi

          # - Snyk scanning
          # - if [ -n "$SNYK_TOKEN" ]; then npm install -g snyk && snyk test; fi

          # - Trivy for container scanning
          # - if [ -n "$DOCKER_IMAGE" ]; then trivy image $DOCKER_IMAGE; fi

          - echo "Configure security scanning in Repository Variables"
          - echo "=== Security Scan Complete ==="

# ==============================================================================
# PIPELINE CONFIGURATIONS
# ==============================================================================
# These pipelines are pre-configured for common workflows
# Customize the branch names and workflows as needed for your project
# ==============================================================================

pipelines:
  # Default pipeline - Runs on all branches
  default:
    - step: *build-and-test

  # Branch-specific pipelines
  branches:
    # Main branch - Full CI/CD with staging deployment
    main:
      - step: *build-and-test
      - step: *code-quality
      - step: *deploy-staging

    # Master branch - Full CI/CD with staging deployment
    master:
      - step: *build-and-test
      - step: *code-quality
      - step: *deploy-staging

    # Development branch - Build and test only
    develop:
      - step: *build-and-test
      - step: *code-quality

    # Feature branches - Build and test
    'feature/**':
      - step: *build-and-test

    # Hotfix branches - Full pipeline
    'hotfix/**':
      - step: *build-and-test
      - step: *code-quality
      - step: *deploy-staging

  # Tag-based deployments
  tags:
    # Release tags - Production deployment (manual approval required)
    'release-*':
      - step: *build-and-test
      - step: *code-quality
      - step: *security-scan
      - step: *deploy-production

    # Version tags - Production deployment
    'v*':
      - step: *build-and-test
      - step: *code-quality
      - step: *security-scan
      - step: *deploy-production

  # Pull request pipelines
  pull-requests:
    '**':
      - step: *build-and-test
      - step: *code-quality

  # ==============================================================================
  # CUSTOM PIPELINES - Manually triggered from Bitbucket UI
  # ==============================================================================
  custom:
    # Quick build without tests (for debugging)
    build-only:
      - step:
          name: Build Only (No Tests)
          caches:
            - maven
            - maven-local
            - gradle
            - npm
            - node
          script:
            - echo "=== Quick Build (No Tests) ==="
            - chmod +x scripts/build.sh
            - ./scripts/build.sh
            - echo "=== Build Complete ==="

    # Full quality check without deployment
    quality-check:
      - step: *build-and-test
      - step: *code-quality
      - step: *security-scan

    # Deploy to staging only
    deploy-staging-only:
      - step: *deploy-staging

    # Full pipeline with all steps
    full-pipeline:
      - step: *build-and-test
      - step: *code-quality
      - step: *security-scan
      - step: *deploy-staging
      - step: *deploy-production

    # Emergency hotfix deployment
    emergency-deploy:
      - step:
          name: Emergency Production Deploy
          deployment: production
          script:
            - echo "=== EMERGENCY DEPLOYMENT ==="
            - echo "WARNING: Bypassing normal checks!"
            - chmod +x scripts/deploy-production.sh
            - ./scripts/deploy-production.sh
            - echo "=== Emergency Deployment Complete ==="
