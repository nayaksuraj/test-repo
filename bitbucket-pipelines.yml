# ==============================================================================
# COMPREHENSIVE BITBUCKET PIPELINE WITH GIT FLOW & DOCKER/HELM/K8S
# ==============================================================================
# This pipeline implements industry-standard CI/CD practices:
# - Git Flow branching strategy
# - Multi-stage testing (unit, integration, quality)
# - Docker containerization with security scanning
# - Helm chart packaging and deployment
# - Environment-specific deployments (dev auto, stage/prod manual)
# ==============================================================================

image: maven:3.8.6-openjdk-17

# ==============================================================================
# Pipeline Options
# ==============================================================================
options:
  max-time: 120  # Maximum pipeline execution time (minutes)
  docker: true   # Enable Docker service for TestContainers and Docker builds

# ==============================================================================
# Caches for faster builds
# ==============================================================================
definitions:
  caches:
    maven-local: ~/.m2/repository
    docker-layers: /var/lib/docker

  services:
    docker:
      memory: 3072  # Increase Docker memory for builds

  # ==============================================================================
  # Reusable Pipeline Steps
  # ==============================================================================
  steps:
    # ==========================================================================
    # 1. CODE CHECKOUT (Implicit in Bitbucket Pipelines)
    # ==========================================================================

    # ==========================================================================
    # 2. UNIT TESTS
    # ==========================================================================
    - step: &unit-tests
        name: Unit Tests
        caches:
          - maven
          - maven-local
        script:
          - echo "=== Running Unit Tests ==="
          - chmod +x scripts/test.sh
          - ./scripts/test.sh
          - echo "=== Unit Tests Complete ==="
        artifacts:
          - target/surefire-reports/**
          - target/site/jacoco/**

    # ==========================================================================
    # 3. INTEGRATION TESTS
    # ==========================================================================
    - step: &integration-tests
        name: Integration Tests
        services:
          - docker
        caches:
          - maven
          - maven-local
        script:
          - echo "=== Running Integration Tests ==="
          - chmod +x scripts/integration-test.sh
          - export DOCKER_REQUIRED=true
          - ./scripts/integration-test.sh
          - echo "=== Integration Tests Complete ==="
        artifacts:
          - target/failsafe-reports/**
          - target/site/jacoco/**

    # ==========================================================================
    # 4. CODE QUALITY ANALYSIS
    # ==========================================================================
    - step: &code-quality
        name: Code Quality & SonarQube
        caches:
          - maven
          - maven-local
        script:
          - echo "=== Running Code Quality Analysis ==="
          - chmod +x scripts/quality.sh
          - export SONAR_ENABLED=${SONAR_ENABLED:-false}
          - export SONAR_TOKEN=${SONAR_TOKEN}
          - export SONAR_HOST_URL=${SONAR_HOST_URL}
          - ./scripts/quality.sh
          - echo "=== Code Quality Analysis Complete ==="
        artifacts:
          - target/site/jacoco/**
          - target/checkstyle-result.xml
          - security-reports/**

    # ==========================================================================
    # 5. BUILD APPLICATION & PACKAGE
    # ==========================================================================
    - step: &build-package
        name: Build and Package
        caches:
          - maven
          - maven-local
        script:
          - echo "=== Building Application ==="
          - chmod +x scripts/build.sh
          - ./scripts/build.sh
          - chmod +x scripts/package.sh
          - ./scripts/package.sh
          - echo "=== Build Complete ==="
        artifacts:
          - target/*.jar
          - build-info/**

    # ==========================================================================
    # 6. DOCKER BUILD AND PUSH
    # ==========================================================================
    - step: &docker-build-push
        name: Docker Build and Push
        services:
          - docker
        caches:
          - docker-layers
        script:
          - echo "=== Building Docker Image ==="
          - chmod +x scripts/docker-build.sh
          - export DOCKER_REGISTRY=${DOCKER_REGISTRY}
          - export DOCKER_REPOSITORY=${DOCKER_REPOSITORY:-demo-app}
          - export DOCKER_USERNAME=${DOCKER_USERNAME}
          - export DOCKER_PASSWORD=${DOCKER_PASSWORD}
          - export DOCKER_PUSH=true
          - export VERSION=${BITBUCKET_TAG:-0.0.1-SNAPSHOT}
          - ./scripts/docker-build.sh
          - echo "=== Docker Build and Push Complete ==="
        artifacts:
          - build-info/docker-image.txt

    # ==========================================================================
    # 7. DOCKER IMAGE VULNERABILITY SCAN (Trivy)
    # ==========================================================================
    - step: &docker-scan
        name: Docker Vulnerability Scan (Trivy)
        services:
          - docker
        script:
          - echo "=== Scanning Docker Image for Vulnerabilities ==="
          - chmod +x scripts/docker-scan.sh
          - export TRIVY_SEVERITY=${TRIVY_SEVERITY:-CRITICAL,HIGH,MEDIUM}
          - export TRIVY_EXIT_CODE=${TRIVY_EXIT_CODE:-0}
          - export SCAN_TYPE=both
          - ./scripts/docker-scan.sh
          - echo "=== Vulnerability Scan Complete ==="
        artifacts:
          - security-reports/**

    # ==========================================================================
    # 8. HELM CHART LINT, PACKAGE AND PUSH
    # ==========================================================================
    - step: &helm-package
        name: Helm Chart Package and Push
        script:
          - echo "=== Packaging Helm Chart ==="
          - chmod +x scripts/helm-package.sh
          - export HELM_CHART_PATH=./helm-chart
          - export HELM_REGISTRY=${HELM_REGISTRY}
          - export HELM_REGISTRY_USERNAME=${HELM_REGISTRY_USERNAME}
          - export HELM_REGISTRY_PASSWORD=${HELM_REGISTRY_PASSWORD}
          - export HELM_PUSH=${HELM_PUSH:-true}
          - ./scripts/helm-package.sh
          - echo "=== Helm Package Complete ==="
        artifacts:
          - helm-packages/**
          - build-info/helm-chart.txt

    # ==========================================================================
    # 9. DEPLOY TO DEVELOPMENT (Auto-Approve)
    # ==========================================================================
    - step: &deploy-dev
        name: Deploy to Development
        deployment: development
        script:
          - echo "=== Deploying to Development Environment ==="
          - chmod +x scripts/deploy-dev.sh
          - export NAMESPACE=${DEV_NAMESPACE:-dev}
          - export KUBECONFIG=${KUBECONFIG}
          - ./scripts/deploy-dev.sh
          - echo "=== Development Deployment Complete ==="

    # ==========================================================================
    # 10. DEPLOY TO STAGING (Manual Approval)
    # ==========================================================================
    - step: &deploy-stage
        name: Deploy to Staging
        deployment: staging
        trigger: manual
        script:
          - echo "=== Deploying to Staging Environment ==="
          - chmod +x scripts/deploy-stage.sh
          - export NAMESPACE=${STAGE_NAMESPACE:-staging}
          - export KUBECONFIG=${KUBECONFIG}
          - ./scripts/deploy-stage.sh
          - echo "=== Staging Deployment Complete ==="

    # ==========================================================================
    # 11. DEPLOY TO PRODUCTION (Manual Approval)
    # ==========================================================================
    - step: &deploy-prod
        name: Deploy to Production
        deployment: production
        trigger: manual
        script:
          - echo "=== Deploying to Production Environment ==="
          - chmod +x scripts/deploy-prod.sh
          - export NAMESPACE=${PROD_NAMESPACE:-production}
          - export KUBECONFIG=${KUBECONFIG}
          - export AUTO_APPROVE=false
          - ./scripts/deploy-prod.sh
          - echo "=== Production Deployment Complete ==="

# ==============================================================================
# GIT FLOW PIPELINE CONFIGURATIONS
# ==============================================================================
pipelines:
  # Default pipeline (for non-matching branches)
  default:
    - step: *unit-tests
    - step: *build-package

  # ==============================================================================
  # BRANCH-SPECIFIC PIPELINES (Git Flow)
  # ==============================================================================
  branches:
    # ==========================================================================
    # FEATURE BRANCHES: feature/*
    # - Unit Tests
    # - Integration Tests
    # - Code Quality
    # - Build Package
    # ==========================================================================
    'feature/**':
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package

    # ==========================================================================
    # DEVELOP BRANCH: develop
    # - All tests and quality checks
    # - Docker build and push
    # - Vulnerability scan
    # - Helm package
    # - Auto-deploy to DEV
    # ==========================================================================
    develop:
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package
      - step: *docker-build-push
      - step: *docker-scan
      - step: *helm-package
      - step: *deploy-dev

    # ==========================================================================
    # MAIN BRANCH: main
    # - All tests and quality checks
    # - Docker build and push
    # - Vulnerability scan
    # - Helm package
    # - Auto-deploy to DEV
    # - Manual deploy to STAGE
    # ==========================================================================
    main:
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package
      - step: *docker-build-push
      - step: *docker-scan
      - step: *helm-package
      - step: *deploy-dev
      - step: *deploy-stage

    # ==========================================================================
    # RELEASE BRANCH: release
    # - Full pipeline
    # - Manual deploy to STAGE and PROD
    # ==========================================================================
    release:
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package
      - step: *docker-build-push
      - step: *docker-scan
      - step: *helm-package
      - step: *deploy-dev
      - step: *deploy-stage
      - step: *deploy-prod

    # ==========================================================================
    # HOTFIX BRANCHES: hotfix/*
    # - Fast-track pipeline for critical fixes
    # - Can deploy to all environments
    # ==========================================================================
    'hotfix/**':
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package
      - step: *docker-build-push
      - step: *docker-scan
      - step: *helm-package
      - step: *deploy-dev
      - step: *deploy-stage
      - step: *deploy-prod

  # ==============================================================================
  # TAG-BASED DEPLOYMENTS
  # ==============================================================================
  tags:
    # Production release tags (e.g., v1.0.0, v1.2.3)
    'v*':
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package
      - step: *docker-build-push
      - step: *docker-scan
      - step: *helm-package
      - step: *deploy-prod

  # ==============================================================================
  # PULL REQUEST PIPELINES
  # ==============================================================================
  pull-requests:
    '**':
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package

  # ==============================================================================
  # CUSTOM/MANUAL PIPELINES
  # ==============================================================================
  custom:
    # Full pipeline - Run everything
    full-pipeline:
      - step: *unit-tests
      - step: *integration-tests
      - step: *code-quality
      - step: *build-package
      - step: *docker-build-push
      - step: *docker-scan
      - step: *helm-package
      - step: *deploy-dev
      - step: *deploy-stage
      - step: *deploy-prod

    # Build and test only
    build-and-test:
      - step: *unit-tests
      - step: *integration-tests
      - step: *build-package

    # Docker build only
    docker-only:
      - step: *build-package
      - step: *docker-build-push
      - step: *docker-scan

    # Deploy to dev only
    deploy-dev-only:
      - step: *deploy-dev

    # Deploy to staging only
    deploy-stage-only:
      - step: *deploy-stage

    # Emergency production deploy (skip tests - use with caution!)
    emergency-prod-deploy:
      - step:
          name: Emergency Production Deploy
          deployment: production
          trigger: manual
          script:
            - echo "=== EMERGENCY PRODUCTION DEPLOYMENT ==="
            - echo "WARNING - Skipping tests and checks!"
            - chmod +x scripts/deploy-prod.sh
            - export NAMESPACE=${PROD_NAMESPACE:-production}
            - export AUTO_APPROVE=false
            - ./scripts/deploy-prod.sh
