# ==============================================================================
# Staging Environment Values
# ==============================================================================
# Override values for staging environment
# Usage: helm upgrade --install demo-app ./helm-chart -f helm-chart/values-stage.yaml
# ==============================================================================

# Production-like replica count
replicaCount: 2

# Image configuration
image:
  repository: your-registry/demo-app
  pullPolicy: IfNotPresent
  tag: "stage-latest"

# Environment-specific annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/actuator/prometheus"
  environment: "staging"

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080

# Ingress for staging environment
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
  hosts:
    - host: demo-app-stage.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: demo-app-stage-tls
      hosts:
        - demo-app-stage.example.com

# Production-like resources
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Enable autoscaling for staging
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Staging environment variables
env:
  - name: SPRING_PROFILES_ACTIVE
    value: "staging"
  - name: JAVA_OPTS
    value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
  - name: LOG_LEVEL
    value: "INFO"
  - name: ENVIRONMENT
    value: "staging"

# Pod Disruption Budget enabled
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Standard health checks
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  path: /actuator/prometheus
  labels:
    release: prometheus

# Anti-affinity for better distribution
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - demo-app
          topologyKey: kubernetes.io/hostname
